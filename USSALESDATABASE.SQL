--1--REVENUE EACH IN THE US SALES TABLE

--SELECT *, 
--(Sale_Price * Quantity_Sold_lb) AS Revenue
--FROM US_Sales_database_2019_2023

--PERMANENTLY ADDED REVENUE COLUMN TO THE TABLE
--ALTER TABLE US_Sales_database_2019_2023
--ADD Revenue AS (Sale_Price * Quantity_Sold_lb);

--2--YEARLY REVENUE GENERATED

--SELECT 
--    YEAR(Purchase_Date) AS Purchase_Year,
--    SUM(Revenue) AS Total_Revenue
--FROM 
--    US_Sales_database_2019_2023
--GROUP BY 
--    YEAR(Purchase_Date) 
--    ORDER BY Purchase_Year

--ADDING PROFIT TO THE TABLE
--SELECT *, 
--((Sale_Price- Purchase_Price) * Quantity_Sold_lb) AS Profit
--FROM US_Sales_database_2019_2023

--ALTER TABLE US_Sales_database_2019_2023
--ADD Profit AS ((Sale_Price- Purchase_Price) * Quantity_Sold_lb)

--3--PROFIT AND PROFIT MARGIN PER YEAR

--SELECT
--    YEAR(Purchase_Date) AS Purchase_Year,
--    SUM(Profit) AS Total_Profit,
--    ROUND(
--        CAST(SUM(Profit) AS FLOAT) / NULLIF(SUM(Revenue), 0), 
--        3
--    ) AS Profit_Margin
--FROM 
--    US_Sales_database_2019_2023
--GROUP BY
--    YEAR(Purchase_Date)
--ORDER BY
--    Total_Profit DESC;
/*
4--REVENUE GENERATED BY EACH PRODUCTS
*/
--SELECT 
--    US.Product_ID,
--    Pd.Product,
--    SUM(US.Revenue) AS Total_Revenue
--FROM 
--    US_Sales_database_2019_2023 US
--JOIN 
--    Products_database Pd
--    ON US.Product_ID = Pd.Product_ID
--GROUP BY 
--    US.Product_ID, Pd.Product
--ORDER BY 
--    Total_Revenue DESC;

 --5--REVENUE GENERATED BY BUYERS WITH THE PRODUCTS AND CATEGORIES     

--SELECT
--    Bd.Buyer,
--    Pd.Product,
--    Cd.Category,
--    SUM(US.Revenue) AS Total_Revenue
--FROM 
--    US_Sales_database_2019_2023 US
--JOIN 
--    Buyers_database Bd
--    ON US.Buyer_ID = Bd.Buyer_ID
--JOIN 
--    Products_database Pd
--    ON US.Product_ID = Pd.Product_ID
--JOIN 
--    Categories_database Cd
--    ON US.Category_ID = Cd.Category_ID
--GROUP BY
--    Bd.Buyer,
--    Pd.Product,
--    Cd.Category
--ORDER BY
--    Total_Revenue DESC, Bd.Buyer;

--6--PROFIT GENERATED BY BUYERS WITH THE CATEGORIES AND PRODUCTS
/*
SELECT
    Bd.Buyer,
    Pd.Product,
    Cd.Category,
    SUM(US.Profit) AS Total_Profit
FROM 
    US_Sales_database_2019_2023 US
JOIN 
    Buyers_database Bd
    ON US.Buyer_ID = Bd.Buyer_ID
JOIN 
    Products_database Pd
    ON US.Product_ID = Pd.Product_ID
JOIN 
    Categories_database Cd
    ON US.Category_ID = Cd.Category_ID
GROUP BY
    Bd.Buyer,
    Pd.Product,
    Cd.Category
ORDER BY
    Total_Profit DESC, Bd.Buyer;
    */

--7--CATEGORIES AND REVENUE GENERATED

--    SELECT
--    Cd.Category,
--    SUM(US.Revenue) AS Total_Revenue
--FROM 
--    US_Sales_database_2019_2023 US
--JOIN 
--    Categories_database Cd
--    ON US.Category_ID = Cd.Category_ID
--GROUP BY
--    Cd.Category
--ORDER BY
--    Total_Revenue DESC;

--8--PROFITABLE CATEGORIES

--SELECT
--    Cd.Category,
--    SUM(US.Profit) AS Total_Profit
--FROM 
--    US_Sales_database_2019_2023 US
--JOIN 
--    Categories_database Cd
--    ON US.Category_ID = Cd.Category_ID
--GROUP BY
--    Cd.Category
--ORDER BY
--    Total_Profit DESC;

--9--TOP 3 PRODUCTS WITH THEIR CATEGORIES
/*
WITH Product_Revenue AS (
    SELECT 
        PC.Category_ID,
        Cd.Category,      
        Pd.Product,                
        SUM(US.Revenue) AS Total_Revenue,
        ROW_NUMBER() OVER (PARTITION BY PC.Category_ID ORDER BY SUM(US.Revenue) DESC) AS rn
    FROM 
        US_Sales_database_2019_2023 US
    JOIN 
        Products_database Pd 
        ON US.Product_ID = Pd.Product_ID
    JOIN 
        Product_Category_database PC 
        ON Pd.Product_ID = PC.Product_ID
    JOIN 
        Categories_database Cd 
        ON PC.Category_ID = Cd.Category_ID
    GROUP BY 
        PC.Category_ID, Cd.Category, Pd.Product
)

SELECT *
FROM Product_Revenue
WHERE rn <= 3
ORDER BY rn
*/

--10--TOP 10 GENERATING REVENUE

--WITH Product_Sales AS (
--    SELECT 
--        Pd.Product,                
--        SUM(US.Revenue) AS Total_Revenue
--    FROM 
--        US_Sales_database_2019_2023 US
--    JOIN 
--        Products_database Pd 
--        ON US.Product_ID = Pd.Product_ID
--    GROUP BY 
--        Pd.Product
--),

--Product_Revenue AS (
--    SELECT *,
--        ROW_NUMBER() OVER (ORDER BY Total_Revenue DESC) AS rn
--    FROM Product_Sales
--)
--SELECT *
--FROM Product_Revenue
--WHERE rn <= 10
--ORDER BY Total_Revenue DESC;


--11--TOP 10 PROFITABLE PRODUCTS

--WITH Product_Sales AS (
--    SELECT 
--        Pd.Product,                
--        SUM(US.Profit) AS Total_Profit
--    FROM 
--        US_Sales_database_2019_2023 US
--    JOIN 
--        Products_database Pd 
--        ON US.Product_ID = Pd.Product_ID
--    GROUP BY 
--        Pd.Product
--),

--Product_Profit AS (
--    SELECT *,
--        ROW_NUMBER() OVER (ORDER BY Total_Profit DESC) AS rn
--    FROM Product_Sales
--)
--SELECT *
--FROM Product_Profit
--WHERE rn <= 10
--ORDER BY Total_Profit DESC

--12--STATES WITH THE NUMBER OF BUYER AND ALSO REVENUE GENERATED

--SELECT
--    Sd.State,                                  
--    COUNT(DISTINCT US.Buyer_ID) AS Number_of_Buyers, 
--    SUM(US.Revenue) AS Total_Revenue           
--FROM 
--    US_Sales_database_2019_2023 US
--JOIN 
--    States_database Sd
--    ON US.State_ID = Sd.State_ID
--GROUP BY 
--    Sd.State
--ORDER BY 
--    Total_Revenue DESC;

--13--THE TOP SELLING PRODUCTS IN EACH COUNTRY WITH THE QUANTITY SOLD

--WITH State_Product_Sales AS (
--    SELECT
--        Sd.State,
--        Pd.Product,
--        COUNT(DISTINCT US.Buyer_ID) AS Number_of_Buyers,
--        SUM(US.Quantity_Sold_lb) AS Total_Quantity,
--        SUM(US.Revenue) AS Total_Revenue
--    FROM 
--        US_Sales_database_2019_2023 US
--    JOIN 
--        States_database Sd
--        ON US.State_ID = Sd.State_ID
--    JOIN 
--        Products_database Pd
--        ON US.Product_ID = Pd.Product_ID
--    GROUP BY
--        Sd.State, Pd.Product
--),

--Ranked_Products AS (
--    SELECT *,
--        ROW_NUMBER() OVER (PARTITION BY State ORDER BY Total_Quantity DESC) AS Product_rn
--    FROM State_Product_Sales
--)

--SELECT 
--    State,
--    Product,
--    Number_of_Buyers,
--    Total_Quantity,
--    Total_Revenue,
--    Product_rn
--FROM 
--    Ranked_Products
--WHERE 
--    Product_rn =1
--ORDER BY 
--    5 DESC ;



--14--LEAST 10 PRODUCTS WITH THE CATEGORY

--WITH Product_Revenue AS (
--    SELECT 
--        Pd.Product,
--        Cd.Category,
--        SUM(US.Revenue) AS Total_Revenue
--    FROM 
--        US_Sales_database_2019_2023 US
--    JOIN 
--        Products_database Pd 
--        ON US.Product_ID = Pd.Product_ID
--    JOIN 
--        Categories_database Cd 
--        ON US.Category_ID = Cd.Category_ID
--    GROUP BY 
--        Pd.Product, Cd.Category
--),

--Ranked_Products AS (
--    SELECT *,
--        ROW_NUMBER() OVER (ORDER BY Total_Revenue ASC) AS Product_Rank
--    FROM Product_Revenue
--)

--SELECT *
--FROM Ranked_Products
--WHERE Product_Rank <= 10
--ORDER BY Total_Revenue ASC;

--15--REVENUE GENERATED BY EACH MONTH

--SELECT
--    MONTH(US.Purchase_Date) AS Purchase_Month, 
--    SUM(US.Profit) AS Total_Revenue
--FROM 
--    US_Sales_database_2019_2023 US
--GROUP BY 
--    MONTH(US.Purchase_Date)
--ORDER BY 
--   Purchase_Month 
 

 --16--REVENUE GENERATED BY EACH STATE, THE PRODUCTS SOLD, AND THEIR CATEGORY

--WITH Monthly_Product_Revenue AS (
--    SELECT
--        YEAR(US.Purchase_Date) AS Purchase_Year,
--        MONTH(US.Purchase_Date) AS Purchase_Month,
--        DATENAME(MONTH, US.Purchase_Date) AS Month_name,
--        Sd.State,
--        Cd.Category AS Category,        
--        Pd.Product,
--        SUM(US.Revenue) AS Total_Revenue
--    FROM 
--        US_Sales_database_2019_2023 US
--    JOIN 
--        Products_database Pd 
--        ON US.Product_ID = Pd.Product_ID
--    JOIN 
--        Product_Category_database PC 
--        ON Pd.Product_ID = PC.Product_ID
--    JOIN 
--        Categories_database Cd 
--        ON PC.Category_ID = Cd.Category_ID
--    JOIN 
--        States_database Sd 
--        ON US.State_ID = Sd.State_ID
--    GROUP BY 
--        YEAR(US.Purchase_Date),
--        MONTH(US.Purchase_Date),
--        DATENAME(MONTH, US.Purchase_Date),
--        Sd.State,
--        Cd.Category,
--        Pd.Product
--),

--Ranked_Monthly_Products AS (
--    SELECT *,
--        ROW_NUMBER() OVER (
--            PARTITION BY Purchase_Year, Purchase_Month, Month_name 
--            ORDER BY Total_Revenue DESC
--        ) AS Product_Rank
--    FROM Monthly_Product_Revenue
--)

--SELECT 
--    Purchase_Year,
--    Purchase_Month,
--    Month_name,
--    State,
--    Category,
--    Product,
--    Total_Revenue
--FROM Ranked_Monthly_Products
--WHERE Product_Rank = 1
--ORDER BY Purchase_Year, Purchase_Month, Month_name;

--17--PROFITABLE PRODUCTS IN EACH MONTH, YEAR AND THE STATE WITH THE QUANTITY SOLD IN EACH STATE
/*
WITH Monthly_Product_Profit AS (
    SELECT
        YEAR(US.Purchase_Date) AS Purchase_Year,
        MONTH(US.Purchase_Date) AS Purchase_Month,               
        DATENAME(MONTH, US.Purchase_Date) AS Month_name,
        Sd.State,       
        Pd.Product,
        SUM(US.Quantity_Sold_lb) AS Total_Quantity_Sold,    
        SUM(US.Profit) AS Total_Profit                       
    FROM 
        US_Sales_database_2019_2023 US
    JOIN 
        Products_database Pd 
        ON US.Product_ID = Pd.Product_ID
    JOIN 
        States_database Sd 
        ON US.State_ID = Sd.State_ID
    GROUP BY 
        YEAR(US.Purchase_Date),
        MONTH(US.Purchase_Date),
        DATENAME(MONTH, US.Purchase_Date),
        Sd.State,
        Pd.Product
),

Ranked_Monthly_Products AS (
    SELECT *,
        ROW_NUMBER() OVER (
            PARTITION BY Purchase_Year, Purchase_Month   
            ORDER BY Total_Profit DESC
        ) AS Product_Rank
    FROM Monthly_Product_Profit
)

SELECT 
    Purchase_Year,
    Month_name,
    State,
    Product,
    Total_Quantity_Sold,    
    Total_Profit         
FROM Ranked_Monthly_Products
WHERE Product_Rank = 1
ORDER BY Purchase_Year, Purchase_Month;
*/

--18--PRODUCTS AND THEIR CATEGORIES WHERE THE TOTAL REVENUE IS HIGHER THAN THE AVERAGE REVENUE

--SELECT 
--    Cd.Category,
--    Pd.Product,
--    SUM(US.Revenue) AS Total_Revenue
--FROM 
--    US_Sales_database_2019_2023 US
--JOIN 
--    Products_database Pd 
--    ON US.Product_ID = Pd.Product_ID
--JOIN
--    Categories_database Cd
--    ON US.Category_ID = Cd.Category_ID
--GROUP BY 
--    Cd.Category,
--    Pd.Product
--HAVING 
--    SUM(US.Revenue) > (
--        SELECT AVG(ProductRevenue)
--        FROM (
--            SELECT SUM(Revenue) AS ProductRevenue
--            FROM US_Sales_database_2019_2023
--            GROUP BY Product_ID
--        ) AS Rev_Table
--    )
--ORDER BY 
--    Total_Revenue DESC


/*
SELECT 
    name AS Constraint_Name
FROM 
    sys.key_constraints
WHERE 
    parent_object_id = OBJECT_ID('US_Sales_database_2019_2023');

    ALTER TABLE US_Sales_database_2019_2023
DROP CONSTRAINT PK__US_Sales__543E6DA32271F7E5

ALTER TABLE US_Sales_database_2019_2023
DROP COLUMN Purchase_ID 
*/

--19-- CASE STATEMENTS TO KNOW THE REVENUE GENERATED AFTER THE COVID YEAR
--SELECT 
--    YEAR(Purchase_Date) AS Purchase_Year,
--    SUM(Revenue) AS Total_Revenue,
--    CASE 
--        WHEN YEAR(Purchase_Date) < 2020 THEN 'Pre-COVID'
--        WHEN YEAR(Purchase_Date) = 2020 THEN 'COVID Year'
--        ELSE 'Post-COVID'
--    END AS Sales_Period
--FROM 
--    US_Sales_database_2019_2023
--GROUP BY 
--    YEAR(Purchase_Date)
--ORDER BY 
--    Purchase_Year;

--20--SEASONAL SALES ANALYSIS
--WITH Seasonal_Sales AS (
--    SELECT
--        CASE 
--            WHEN MONTH(Purchase_Date) IN (12, 1, 2) THEN 'Winter'
--            WHEN MONTH(Purchase_Date) IN (3, 4, 5) THEN 'Spring'
--            WHEN MONTH(Purchase_Date) IN (6, 7, 8) THEN 'Summer'
--            WHEN MONTH(Purchase_Date) IN (9, 10, 11) THEN 'Fall'
--        END AS Season,
--        Pd.Product,
--        SUM(US.Quantity_Purchased_lb) AS Total_Quantity_Pur,
--        SUM(US.Quantity_Sold_lb) AS Total_Quantity_Sold,
--        SUM(US.Revenue) AS Total_Revenue
--    FROM 
--        US_Sales_database_2019_2023 US
--    JOIN 
--        Products_database Pd
--        ON US.Product_ID = Pd.Product_ID
--    GROUP BY 
--        CASE 
--            WHEN MONTH(Purchase_Date) IN (12, 1, 2) THEN 'Winter'
--            WHEN MONTH(Purchase_Date) IN (3, 4, 5) THEN 'Spring'
--            WHEN MONTH(Purchase_Date) IN (6, 7, 8) THEN 'Summer'
--            WHEN MONTH(Purchase_Date) IN (9, 10, 11) THEN 'Fall'
--        END,
--        Pd.Product
--),

--Ranked_Seasonal_Products AS (
--    SELECT *,
--        ROW_NUMBER() OVER (
--            PARTITION BY Season
--            ORDER BY Total_Revenue DESC
--        ) AS Product_Rank
--    FROM Seasonal_Sales
--)

--SELECT
--    Season,
--    Product,
--    Total_Quantity_Pur,
--    Total_Quantity_Sold,
--    Total_Revenue
--FROM Ranked_Seasonal_Products
--WHERE Product_Rank = 1
--ORDER BY Season;

--21-- SEASONAL SALES WITH YEAR

--WITH Seasonal_Sales AS (
--    SELECT
--        YEAR(US.Purchase_Date) AS Purchase_Year,
--        CASE 
--            WHEN MONTH(US.Purchase_Date) IN (12, 1, 2) THEN 'Winter'
--            WHEN MONTH(US.Purchase_Date) IN (3, 4, 5) THEN 'Spring'
--            WHEN MONTH(US.Purchase_Date) IN (6, 7, 8) THEN 'Summer'
--            WHEN MONTH(US.Purchase_Date) IN (9, 10, 11) THEN 'Fall'
--        END AS Season,
--        Pd.Product,
--        SUM(US.Quantity_Sold_lb) AS Total_Quantity_Sold,
--        SUM(US.Quantity_Purchased_lb) AS Total_Quantity_Pur,
--        SUM(US.Revenue) AS Total_Revenue
--    FROM 
--        US_Sales_database_2019_2023 US
--    JOIN 
--        Products_database Pd
--        ON US.Product_ID = Pd.Product_ID
--    GROUP BY 
--        YEAR(US.Purchase_Date),
--        CASE 
--            WHEN MONTH(US.Purchase_Date) IN (12, 1, 2) THEN 'Winter'
--            WHEN MONTH(US.Purchase_Date) IN (3, 4, 5) THEN 'Spring'
--            WHEN MONTH(US.Purchase_Date) IN (6, 7, 8) THEN 'Summer'
--            WHEN MONTH(US.Purchase_Date) IN (9, 10, 11) THEN 'Fall'
--        END,
--        Pd.Product
--),

--Ranked_Seasonal_Products AS (
--    SELECT *,
--        ROW_NUMBER() OVER (
--            PARTITION BY Purchase_Year, Season
--            ORDER BY Total_Revenue DESC
--        ) AS Product_Rank
--    FROM Seasonal_Sales
--)

--SELECT
--    Purchase_Year,
--    Season,
--    Product,
--    Total_Quantity_Sold,
--    Total_Quantity_Pur,
--    Total_Revenue
--FROM Ranked_Seasonal_Products
--WHERE Product_Rank = 1
--ORDER BY Purchase_Year, Season;

--21-- CREATED A VIEW BY JOINING ALL TABLES INORDER TO CREATE A DASHBOARD ON MS EXCEL
--CREATE VIEW vw_Full_US_Sales_View AS
--SELECT
--    YEAR(US.Purchase_Date) AS Purchase_Year,
--    DATENAME(MONTH, US.Purchase_Date) AS Month_Name,
--    US.Purchase_Date,
--    Sd.State,
--    Bd.Buyer_ID,
--    Bd.Buyer,
--    Pd.Product_ID,
--    Pd.Product,
--    Cd.Category_ID,
--    Cd.Category,
--    US.Quantity_Sold_lb,
--    US.Quantity_Purchased_lb,
--    US.Revenue,
--    US.Profit

--FROM 
--    US_Sales_database_2019_2023 US

--LEFT JOIN 
--    Products_database Pd
--    ON US.Product_ID = Pd.Product_ID

--LEFT JOIN 
--    Product_Category_database PC
--    ON Pd.Product_ID = PC.Product_ID

--LEFT JOIN 
--    Categories_database Cd
--    ON PC.Category_ID = Cd.Category_ID

--LEFT JOIN 
--    States_database Sd
--    ON US.State_ID = Sd.State_ID

--LEFT JOIN 
--    Buyers_database Bd
--    ON US.Buyer_ID = Bd.Buyer_ID;

--SELECT *
--FROM vw_Full_US_Sales_View

select distinct count(*)
from States_database